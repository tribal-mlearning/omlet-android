/*
 * Copyright (c) 2012, TATRC and Tribal
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * * Neither the name of TATRC or TRIBAL nor the
 *   names of its contributors may be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL TATRC OR TRIBAL BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.tribal.mobile.model;

import java.io.Serializable;

import org.simpleframework.xml.Attribute;

/**
 * Class that represents a content item in a content package. Could be of type <code>html</code>, <code>video</code> or <code>book</code>. 
 * 
 * @author Jon Brasted and Jack Kierney.
 */
public abstract class BaseContentItem implements Serializable {

	/**
	 * Autogenerated serial version UID
	 */
	private static final long serialVersionUID = 4707470035977007071L;
	
	/* Fields */
	
	@Attribute
	private String id;
	
	@Attribute(required = false)
	private String path;

	@Attribute(required = false)
	private String keywords;

	@Attribute(name = "icon", required = false)
	private String iconPath;

	@Attribute
	private String title;
	
	@Attribute(required = false)
	private String label;
	
	@Attribute(name = "enabled", required = false)
	private boolean isEnabled = true;
	
	@Attribute(name = "mimeType", required = false)
	private String mimeTypeString;
	
	private MimeType mimeType;
	
	private MenuItem menuItemParent;
	
	private String packageId;
	
	/* Properties */
	
	public String getId() {
		return id;
	}
	
	public String getPath() {
		return path;
	}
	
	public String getPathWithPackage() {
		return packageId + "/" + path;
	}
	
	public void setPath(String value){
		this.path = value;
	}
	
	public String getKeywords() {
		return keywords;
	}
	
	public String getIconPath() {
		return iconPath;
	}
	
	public void setIconPath(String value) {
		this.iconPath = value;
	}
	
	public String getTitle() {
		return title;
	}
	
	public String getLabel() {
		return label;
	}

	public MenuItem getMenuItemParent() {
		return menuItemParent;
	}
	
	public void setMenuItemParent(MenuItem value) {
		this.menuItemParent = value;
	}
	
	public boolean hasMenuItemParent() {
		return (menuItemParent != null);
	}
	
	public boolean isEnabled() {
		return isEnabled;
	}
	
	public MimeType getMimeType() {
		return mimeType;
	}
	
	public String getPackageId() {
		return packageId;
	}
	
	public void setPackageId(String value) {
		this.packageId = value;
	}
	
	/* Methods */
	
	/**
	 * Returns a character to be used within an alphabetical-sorted sectioned list.
	 * 
	 * @return	a character to be used within an alphabetical-sorted sectioned list
	 */
	public String getSectionCharacter() {
		String ch = getTitle().substring(0, 1);

		if (ch.charAt(0) == (char) 65279) {
			ch = title.substring(1, 2);
		}

		// convert to uppercase otherwise lowercase a -z will be sorted
		// after upper A-Z
		ch = ch.toUpperCase();
		
		return ch;
	}
	
	/**
	 * Sets the local {@link MimeType} value based on the value of the <code>mimeTypeString</code> variable.
	 */
	public void setMimeType() {
		if (mimeTypeString != null) {		
			this.mimeType = MimeType.valueOf(mimeTypeString);
		}
	}
	
	/**
	 * Returns the full ID path of the object, prefixed with the package ID.
	 * 
	 * @return	the full ID path of the object, prefixed with the package ID
	 */
	public String getFullIdPathWithPackageId() {
		String fullItemIdPath;
		
		if (this.menuItemParent != null) {
			// get full menu item path with package and append this id to it
			String menuItemParentFullIdPathWithPackageId = this.menuItemParent.getFullIdPathWithPackageId();
			
			// append id
			fullItemIdPath = menuItemParentFullIdPathWithPackageId + "." + getId();
		} else {
			// just return id path with package id
			fullItemIdPath = getPackageId() + "." + getId();
		}
		
		return fullItemIdPath;
	}
}